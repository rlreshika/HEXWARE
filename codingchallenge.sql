-- Create Database
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'HotelManagementDB')
BEGIN
    CREATE DATABASE HotelManagementDB;
END;
GO
USE HotelManagementDB;

-- Create Hotels Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Hotels')
BEGIN
    CREATE TABLE Hotels (
        HotelID INT PRIMARY KEY IDENTITY(1,1),
        Name VARCHAR(255) NOT NULL,
        Location VARCHAR(255) NOT NULL,
        Rating DECIMAL(2,1) CHECK (Rating BETWEEN 1 AND 5)
    );
END;

-- Create Rooms Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Rooms')
BEGIN
    CREATE TABLE Rooms (
        RoomID INT PRIMARY KEY IDENTITY(1,1),
        HotelID INT,
        RoomNumber VARCHAR(50) NOT NULL,
        RoomType VARCHAR(50) NOT NULL,
        PricePerNight DECIMAL(10,2) NOT NULL,
        Available BIT NOT NULL DEFAULT 1,
        FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)
    );
END;

-- Create Guests Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Guests')
BEGIN
    CREATE TABLE Guests (
        GuestID INT PRIMARY KEY IDENTITY(1,1),
        FullName VARCHAR(255) NOT NULL,
        Email VARCHAR(255) UNIQUE NOT NULL,
        Email_Lower AS LOWER(Email) PERSISTED UNIQUE,
        PhoneNumber VARCHAR(50) UNIQUE NOT NULL,
        CheckInDate DATETIME,
        CheckOutDate DATETIME
    );
END;

-- Create Bookings Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Bookings')
BEGIN
    CREATE TABLE Bookings (
        BookingID INT PRIMARY KEY IDENTITY(1,1),
        GuestID INT,
        RoomID INT,
        BookingDate DATETIME DEFAULT GETDATE(),
        TotalAmount DECIMAL(10,2),
        Status VARCHAR(50) CHECK (Status IN ('Confirmed', 'Cancelled', 'Checked Out')),
        FOREIGN KEY (GuestID) REFERENCES Guests(GuestID),
        FOREIGN KEY (RoomID) REFERENCES Rooms(RoomID)
    );
END;

-- Create Payments Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Payments')
BEGIN
    CREATE TABLE Payments (
        PaymentID INT PRIMARY KEY IDENTITY(1,1),
        BookingID INT,
        AmountPaid DECIMAL(10,2) NOT NULL,
        PaymentDate DATETIME DEFAULT GETDATE(),
        PaymentMethod VARCHAR(50) CHECK (PaymentMethod IN ('Credit Card', 'Cash', 'Online')),
        FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID)
    );
END;

-- Create Events Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'Events')
BEGIN
    CREATE TABLE Events (
        EventID INT PRIMARY KEY IDENTITY(1,1),
        HotelID INT,
        EventName VARCHAR(255) NOT NULL,
        EventDate DATETIME NOT NULL,
        Venue VARCHAR(255) NOT NULL,
        FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)
    );
END;

-- Create EventParticipants Table
IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'EventParticipants')
BEGIN
    CREATE TABLE EventParticipants (
        ParticipantID INT PRIMARY KEY IDENTITY(1,1),
        ParticipantName VARCHAR(255) NOT NULL,
        ParticipantType VARCHAR(50) CHECK (ParticipantType IN ('Guest', 'Organization')),
        EventID INT,
        FOREIGN KEY (EventID) REFERENCES Events(EventID)
    );
END;

-- Query to retrieve available rooms
SELECT RoomID, HotelID, RoomNumber, RoomType, PricePerNight FROM Rooms WHERE Available = 1;

-- Query to retrieve event participants for a specific event
SELECT ParticipantName FROM EventParticipants WHERE EventID = @EventID;

-- Stored Procedure to update hotel information
CREATE OR ALTER PROCEDURE UpdateHotelInfo
    @HotelID INT,
    @NewName VARCHAR(255),
    @NewLocation VARCHAR(255)
AS
BEGIN
    UPDATE Hotels
    SET Name = @NewName, Location = @NewLocation
    WHERE HotelID = @HotelID;
END;

-- Query to calculate total revenue generated by each hotel
SELECT h.Name, SUM(b.TotalAmount) AS TotalRevenue
FROM Hotels h
JOIN Rooms r ON h.HotelID = r.HotelID
JOIN Bookings b ON r.RoomID = b.RoomID
WHERE b.Status = 'Confirmed'
GROUP BY h.Name;

-- Query to find rooms never booked
SELECT * FROM Rooms WHERE NOT EXISTS (SELECT 1 FROM Bookings WHERE Bookings.RoomID = Rooms.RoomID);

-- Query to retrieve total payments per month and year
SELECT YEAR(PaymentDate) AS Year, MONTH(PaymentDate) AS Month, SUM(AmountPaid) AS TotalPayments
FROM Payments
GROUP BY YEAR(PaymentDate), MONTH(PaymentDate)
ORDER BY Year, Month;

-- Query to retrieve room types based on price range
SELECT DISTINCT RoomType FROM Rooms
WHERE PricePerNight BETWEEN 50 AND 150 OR PricePerNight > 300;

-- Query to retrieve currently occupied rooms with guests
SELECT r.RoomID, r.RoomNumber, g.FullName
FROM Rooms r
JOIN Bookings b ON r.RoomID = b.RoomID
JOIN Guests g ON b.GuestID = g.GuestID
WHERE b.Status = 'Confirmed';

-- Query to find total number of participants in events in a specific city
SELECT COUNT(*) AS TotalParticipants
FROM EventParticipants ep
JOIN Events e ON ep.EventID = e.EventID
JOIN Hotels h ON e.HotelID = h.HotelID
WHERE h.Location = @CityName;

-- Query to retrieve unique room types in a specific hotel
SELECT DISTINCT RoomType FROM Rooms WHERE HotelID = @HotelID;

-- Query to find guests who never made a booking
SELECT * FROM Guests WHERE NOT EXISTS (SELECT 1 FROM Bookings WHERE Bookings.GuestID = Guests.GuestID);

-- Query to retrieve booked rooms along with guests
SELECT r.RoomNumber, g.FullName
FROM Rooms r
JOIN Bookings b ON r.RoomID = b.RoomID
JOIN Guests g ON b.GuestID = g.GuestID;

-- Query to count available rooms per hotel
SELECT h.Name, COUNT(*) AS AvailableRooms
FROM Hotels h
JOIN Rooms r ON h.HotelID = r.HotelID
WHERE r.Available = 1
GROUP BY h.Name
HAVING COUNT(*) > 0;

-- Query to find room pairs of same type in same hotel
SELECT r1.RoomNumber AS Room1, r2.RoomNumber AS Room2, r1.HotelID
FROM Rooms r1, Rooms r2
WHERE r1.HotelID = r2.HotelID AND r1.RoomType = r2.RoomType AND r1.RoomID < r2.RoomID;

-- Query to list all possible combinations of hotels and events
SELECT h.Name AS HotelName, e.EventName
FROM Hotels h CROSS JOIN Events e;

-- Query to find hotel with the highest number of bookings
SELECT TOP 1 h.Name, COUNT(b.BookingID) AS TotalBookings
FROM Hotels h
JOIN Rooms r ON h.HotelID = r.HotelID
JOIN Bookings b ON r.RoomID = b.RoomID
GROUP BY h.Name
ORDER BY TotalBookings DESC;
